name: Api Template

on:
  workflow_call:
    inputs:
      folder:
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      VPS_IP:
        required: true
      VPS_USERNAME:
        required: true
      VPS_PORT:
        required: true
      SSH_PRIVATE_KEY:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup Environment Variables (API Only)
      - name: Setup Environment Variables (API Only)
        run: |
          echo "LOCAL_PORT=${{ secrets.LOCAL_PORT }}" >> .env.prod
          echo "DOCKER_PORT=${{ secrets.DOCKER_PORT }}" >> .env.prod
          echo "ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}" >> .env.prod
          echo "REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}" >> .env.prod
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env.prod
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env.prod
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env.prod
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.prod
          echo "DB_LOCAL_PORT=${{ secrets.DB_LOCAL_PORT }}" >> .env.prod
          echo "DB_DOCKER_PORT=${{ secrets.DB_DOCKER_PORT }}" >> .env.prod
          echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> .env.prod
          echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env.prod
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env.prod
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env.prod
          echo "SPACE_NAME=${{ secrets.SPACE_NAME }}" >> .env.prod
          echo "SPACE_ACCESS_KEY=${{ secrets.SPACE_ACCESS_KEY }}" >> .env.prod
          echo "SPACE_SECRET_KEY=${{ secrets.SPACE_SECRET_KEY }}" >> .env.prod
          echo "SPACE_REGION=${{ secrets.SPACE_REGION }}" >> .env.prod
          echo "SPACE_ENDPOINT=${{ secrets.SPACE_ENDPOINT }}" >> .env.prod

      # 3. Log in to VPS and deploy (with scp and docker deploy in a single SSH command)
      - name: Log in to VPS, upload .env.prod, and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          port: ${{ secrets.VPS_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Upload the .env.prod file
            echo "${{ secrets.SSH_PRIVATE_KEY }}" | ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no -p "${{ secrets.VPS_PORT }}" ${VPS_USERNAME}@${VPS_IP} "mkdir -p /home/fchat-project/api-fchat-2 && echo '${{ secrets.SSH_PRIVATE_KEY }}' > /home/fchat-project/api-fchat-2/.env.prod"

            # SSH commands to deploy
            PROJECT_DIR="/home"
            cd "$PROJECT_DIR"
            if [ -d "$PROJECT_DIR/fchat-project" ]; then
              echo "Directory already exists. Updating project..."
              cd "$PROJECT_DIR/fchat-project"
              git pull origin main
            else
              echo "Directory doesn't exist. Cloning project..."
              git clone git@github.com:fry-marshall/fchat-project.git
              cd fchat-project
            fi

            cd ${{ inputs.folder }}
            echo "ðŸš€ Running docker compose for the api"
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            docker compose -f docker-compose.prod.yml --env-file /home/fchat-project/api-fchat-2/.env.prod pull
            make prod
